name: Testing

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Get current branch
      - name: Get current branch
        run: |
          # Retrieve the current branch name
          git rev-parse --abbrev-ref HEAD
          data1=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: ${data1}"

      # Step 3: Get changed Python files
      - name: Get changed Python files
        run: |
          # Fetch latest changes from the remote repository
          git fetch origin
          # Get the base branch (usually 'main')
          BASE_BRANCH=$(git rev-parse origin/main)
          # Get a list of changed Python files in the 'tests' directory
          CHANGED_FILES=$(git diff --name-only $BASE_BRANCH HEAD | grep '^tests/.*\.py$' || true)
          # Print the list of changed Python test files
          echo "Changed Python Test Files: $CHANGED_FILES"
          # Store the list of changed files in the $GITHUB_ENV environment variable
          echo 'CHANGED_FILES<<EOF' >> $GITHUB_ENV
          echo "$CHANGED_FILES" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      # Step 4: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      # Step 5: Install dependencies
      - name: Install dependencies
        run: |
          # Upgrade pip to the latest version
          python -m pip install --upgrade pip
          # Install Python dependencies from requirements.txt
          pip install -r requirements.txt
          # Install pytest for running tests
          pip install pytest

      # Step 6: Print directory contents
      - name: Print directory contents
        run: |
          # List the contents of the current directory recursively
          ls -R

      # Step 7: Run affected tests
      - name: Run affected tests
        run: |
          # Check if there are changed Python test files
          if [ -n "$CHANGED_FILES" ]; then
            echo "Running affected tests."
            # Change directory to the root of the repository
            cd $GITHUB_WORKSPACE
            # Convert the list of changed files to space-separated format
            CHANGED_FILES_LIST=$(echo "$CHANGED_FILES" | tr '\n' ' ')
            # Run pytest with verbose output on the changed files
            python -m pytest -v $CHANGED_FILES_LIST
          else
            # If no Python test files changed, skip the tests
            echo "No Python test files changed. Skipping tests."
          fi
